package main

import (
	"fmt"
	"sync"
)

func main() {
	var wg sync.WaitGroup //тип позволяет определить группу горутин, котроые должны выполниться вместе как одна группа

	arr := [5]int{2, 4, 6, 8, 10} 	//исходный массив

	channel := make(chan int) //создаю канал

	go func() {  //создаю анонимную функцию которая запускается в горутине
		for _, i := range arr { 		//проходимся по каналу
			channel <- i 				//пишем в канал значение
		}
		close(channel) //закрываю канал для записи
	}()

	wg.Add(2) //создаю 2 потока для конкурентного вычисления

	go func() { //первая функция для конкурентного вычисления квадрата
		for i := range channel {
			fmt.Printf("Значение i - %v, квадрат - %v \n", i, i * i)
		}
		wg.Done() //закрываю поток
	}()

	go func() { //вторая функция для конкурентного вычисления квадрата
		for i := range channel {
			fmt.Printf("Значение i - %v, квадрат - %v \n", i, i * i)
		}
		wg.Done() //закрываю поток
	}()

	wg.Wait() //ждем пока все открытые потоки закроются - синхронизируем потоки
}